# -----------------------------------------------------------------------------
# Blk8_TimeAndDay.yaml
#
# Purpose:
#   ESPHome configuration for reading and decoding the current time and day
#   from a Sabiana VMC controller via Modbus. Publishes time and day as text sensors.
#
# Structure:
#   - text_sensor: Displays the current time and day of week
#   - sensor: Modbus controller sensor to read and parse Block 8 (time and day)
#
# Notes:
#   - The modbus_controller sensor reads 4 bytes and parses them into time and day.
#   - Helper functions like readUnsigned16 and str_sprintf are assumed to be defined elsewhere.
# -----------------------------------------------------------------------------

number:
  - platform: modbus_controller
    modbus_controller_id: sabiana_vmc
    name: "VMC - Hour and Minute"
    id: blk8_hour_minute
    register_type: holding
    address: 0x0800
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: sabiana_vmc
    name: "VMC - Set Day"
    id: blk8_day
    register_type: holding
    address: 0x0801
    value_type: U_WORD
    internal: true

interval:
  - interval: 1h
    then:
      - lambda: |-
          uint16_t vmc_hour_minute = id(blk8_hour_minute).state;
          uint16_t vmc_weekday = id(blk8_day).state;

          uint8_t vmc_hour = (vmc_hour_minute >> 8) & 0xFF;  // High byte
          uint8_t vmc_minute = vmc_hour_minute & 0xFF;      // Low byte

          ESP_LOGD("modbus", "Block 8 - Local Hour: %02d; Minutes: %02d; Weekday: %02d", vmc_hour, vmc_minute, vmc_weekday);

          // Ottieni ora e giorno attuali dall'ESP
          auto t = id(ha_time).now();
          int local_hour = t.hour;
          int local_minute = t.minute;
          int local_weekday = t.day_of_week; // sunday=1... saturday=7
          // Map weekday from Sunday=1 to Sunday=7
          local_weekday = (local_weekday == 1) ? 7 : local_weekday - 1;
          ESP_LOGD("modbus", "Block 8 - HA - Hour: %02d; Minutes: %02d; Weekday: %02d;", local_hour, local_minute, local_weekday);

          int vmc_minutes = vmc_hour * 60 + vmc_minute;
          int local_minutes = local_hour * 60 + local_minutes;
          int diff = abs(local_minutes - vmc_minutes);

          if (diff > 2 ) {
            // Prepara nuovo valore per registro 0x0800 (MSB=ora LSB=minuti)
            uint16_t new_time = ((local_hour & 0xFF) << 8) | (local_minute & 0xFF);
            // Scrivi ora/minuti

            auto call = id(blk8_hour_minute).make_call();
            call.set_value(new_time);
            call.perform();
            ESP_LOGD("modbus", "Block 8 - Aggiornamento ora/minuti: %02d:%02d (diff=%d)", local_hour, local_minute, diff);
          }

          if(vmc_weekday != local_weekday) {
            ESP_LOGD("modbus", "Block 8 - Aggiornamento giorno: %d -> %d", vmc_weekday, local_weekday);
            // Prepara nuovo valore per registro 0x0801 (giorno della settimana)
            uint16_t new_day = local_weekday & 0xFF;
            // Scrivi giorno della settimana
            auto call = id(blk8_day).make_call();
            call.set_value(new_day);
            call.perform();            
          }
