packages:
  - !include Blk0_SystemIdentification.yaml
  - !include Blk1_MachineState.yaml
  - !include Blk2_MachineParameters.yaml
  - !include Blk3_Commands.yaml
  - !include Blk4_UserTimerProgram.yaml
  - !include Blk8_TimeAndDay.yaml
  # - !include Climate.yaml

esphome:
  name: esphome-web-230550
  friendly_name: Esp32-Solaio
  min_version: 2025.5.0
  name_add_mac_suffix: false
  includes: 
    - modbus_helpers.h

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended
  flash_size: 16MB
  # Configurazione PSRAM per ESP32-S3
psram:
  mode: octal
  speed: 80MHz

# -- Logger per il debug --
logger:
  level: INFO
  baud_rate: 115200
  logs:
    modbus_controller: INFO
    modbus: INFO
    uart: INFO

# -- API per l'integrazione con Home Assistant --
api:
  encryption:
    key: !secret api_encryption_key
  on_client_connected:
    then:
      - lambda: |-
          ESP_LOGD("rtc_sync", "Client HA connesso");
  on_client_disconnected:
    then:
      - lambda: |-
          ESP_LOGD("rtc_sync", "Client HA disconnesso");

# -- Abilita gli aggiornamenti Over-the-Air (OTA) --
ota:
  - platform: esphome
    password: !secret ota_password

# -- Configurazione WiFi di backup --
# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password
#   # Hotspot di fallback se ethernet non funziona
#   ap:
#     ssid: "ESP32-Solaio Fallback"
#     password: !secret fallback_password

# -- Configurazione Ethernet W5500 --
ethernet:
  type: W5500
  clk_pin: GPIO15   # ETH_SCLK
  mosi_pin: GPIO13  # ETH_MOSI
  miso_pin: GPIO14  # ETH_MISO
  cs_pin: GPIO16    # ETH_CS
  interrupt_pin: GPIO12  # ETH_INT

# -- Configurazione I2C per RTC e chip di espansione --
i2c:
  scl: GPIO41
  sda: GPIO42
  scan: true
  frequency: 100kHz  # Frequenza standard per DS3231

# -- Dispositivo I2C DS3231 --
i2c_device:
  - id: ds3231_i2c
    address: 0x68

# -- Chip di espansione I/O TCA99554PWR per relè --
pca9554:
  - id: pca9554_hub
    address: 0x20  # Indirizzo I2C del chip TCA9554 (da verificare)

# -- Configurazione orario --
time:

  - platform: homeassistant
    id: ha_time
    timezone: "Europe/Rome"
    on_time_sync:
      then:
        - pcf85063.write_time:
            id: rtc_time
        - lambda: |-
            ESP_LOGD("rtc_sync", "Orario sincronizzato con Home Assistant");

  - platform: pcf85063
    id: rtc_time
    address: 0x51  # Indirizzo standard PCF85063
    update_interval: 60s

# -- Pulsanti di controllo --
button:
  - platform: restart
    name: "Riavvia ESP"
    id: restart_button

  - platform: template
    name: "Buzzer - Allarme"
    on_press:
      then:
        - rtttl.play: "alarm:d=16,o=5,b=100:c6,e6,g6,c7"

# -- Configurazione Output --
output:
  - platform: ledc
    pin: GPIO46
    id: buzzer_output
    frequency: 1000Hz

# -- Configurazione RTTTL per melodie --
rtttl:
  output: buzzer_output

# -- Configurazione LED RGB --
light:
  - platform: fastled_clockless
    chipset: WS2812
    pin: GPIO38
    num_leds: 1
    rgb_order: RGB
    name: "RGB di Stato"
    id: led_rgb
    effects:
      - strobe:
      - flicker:
      - pulse:

# -- Configurazione Relè tramite chip TCA9554 --
switch:
  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 0
      mode: OUTPUT
    name: "Relè 1"
    id: relay_1
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 1
      mode: OUTPUT
    name: "Relè 2"
    id: relay_2
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 2
      mode: OUTPUT
    name: "Relè 3"
    id: relay_3
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 3
      mode: OUTPUT
    name: "Relè 4"
    id: relay_4
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 4
      mode: OUTPUT
    name: "Relè 5"
    id: relay_5
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 5
      mode: OUTPUT
    name: "Relè 6"
    id: relay_6
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 6
      mode: OUTPUT
    name: "Relè 7"
    id: relay_7
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      pca9554: pca9554_hub
      number: 7
      mode: OUTPUT
    name: "Relè 8"
    id: relay_8
    restore_mode: RESTORE_DEFAULT_OFF

# -- Configurazione Ingressi Digitali (8 Digital Inputs) --
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 1"
    id: input_1
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 2"
    id: input_2
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO6
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 3"
    id: input_3
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO7
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 4"
    id: input_4
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO8
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 5"
    id: input_5
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 6"
    id: input_6
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 7"
    id: input_7
    device_class: opening

  - platform: gpio
    pin:
      number: GPIO11
      mode: INPUT_PULLUP
    name: "Ingresso Digitale 8"
    id: input_8
    device_class: opening

  # Pulsante di BOOT
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: "Pulsante Boot"
    id: boot_button

# -- Intervalli di controllo --
interval:
  # Log dell'ora corrente ogni minuto
  - interval: 60s
    then:
      - lambda: |-
          auto t_ha = id(ha_time).now();
          
          if (t_ha.is_valid()) {
            ESP_LOGD("clock", "Ora HA: %s", t_ha.strftime("%Y-%m-%d %H:%M:%S").c_str());
          }

  # Controllo stato connessione ogni 30 secondi
  - interval: 30s
    then:
      - if:
          condition:
            api.connected:
          then:
            - light.turn_on:
                id: led_rgb
                brightness: 15% # < 10% non si accende
                red: 0%
                green: 100%
                blue: 0%
          else:
            - light.turn_on:
                id: led_rgb
                brightness: 50%
                red: 100%
                green: 0%
                blue: 0%

uart:
  - id: modbus_uart
    tx_pin: GPIO17
    rx_pin: GPIO18
    baud_rate: 9600
    parity: NONE
    stop_bits: 1
    data_bits: 8
    debug:
      direction: BOTH
      dummy_receiver: false

# Configurazione Modbus protocol
modbus:
  - id: modbus_sabiana
    uart_id: modbus_uart
    send_wait_time: 200ms

# Configurazione del controller
modbus_controller:
  - id: sabiana_vmc
    modbus_id: modbus_sabiana
    address: 0x01  # Indirizzo della VMC (solo pin 1 su ON)
    update_interval: 30s

# -- Configurazione sensori --
sensor:
  
  # Uptime del sistema
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    entity_category: diagnostic